<?php

/**
 * @file
 * Install, update and uninstall functions for the data_policy module.
 */

use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\data_policy\Entity\DataPolicy;

/**
 * Implements hook_install().
 */
function data_policy_install() {
  // Hide a message about a new version of data policy for the anonymous user.
  user_role_grant_permissions('anonymous', ['without consent']);
}

/**
 * Implements hook_uninstall().
 */
function data_policy_uninstall() {
  /** @var \Drupal\data_policy\Entity\DataPolicyInterface $data_policy */
  foreach (DataPolicy::loadMultiple() as $data_policy) {
    $data_policy->delete();
  }

  \Drupal::configFactory()->getEditable('data_policy.data_policy')->delete();
}

/**
 * Display Name field on the edit form.
 */
function data_policy_update_8001() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.entity_form_display.data_policy.data_policy.default');
  $data = $config->getRawData();
  $data['content']['name'] = [
    'type' => 'string_textfield',
    'weight' => -1,
    'settings' => [
      'size' => 60,
      'placeholder' => ''
    ],
    'third_party_settings' => [],
    'region' => 'content'

  ];
  $config->setData($data);
  $config->save(TRUE);
}

/**
 * Makes the 'data_policy_revision_id' field multiple and migrate its data.
 */
function data_policy_update_8002() {
  // To update the field schema we need to have no field data in the storage,
  // thus we retrieve it, delete it from storage, and write it back to the
  // storage after updating the schema.
  $database = \Drupal::database();

  // Retrieve existing field data.
  $data = $database->select('user_consent', 'uc')->fields('uc', [
      'id',
      'data_policy_revision_id',
    ])->execute()->fetchAllKeyed();

  // Remove data from the storage.
  $database->update('user_consent')
    ->fields(['data_policy_revision_id' => NULL])
    ->execute();

  // Update definitions and schema.
  $manager = \Drupal::entityDefinitionUpdateManager();
  $storage_definition = $manager->getFieldStorageDefinition('data_policy_revision_id', 'user_consent');
  $storage_definition->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);
  $manager->updateFieldStorageDefinition($storage_definition);

  // Restore entity data in the new schema.
  $insert_query = $database->insert('user_consent__data_policy_revision_id')
    ->fields(['bundle', 'deleted', 'entity_id', 'revision_id', 'langcode', 'delta', 'data_policy_revision_id_value']);

  foreach ($data as $id => $data_policy_revision_id) {
    $insert_query->values(['user_consent', 0, $id, $id, 'en', 0, $data_policy_revision_id]);
  }

  $insert_query->execute();
}
